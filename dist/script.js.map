{"version":3,"sources":["script.js"],"names":["valPercent","mySlider","document","getElementById","output","querySelector","clipBoard","btn","pwDisplay","uppercaseInput","lowercaseInput","numberInput","symbolInput","indicator","eg","lowercaseArray","join","toLowerCase","split","uppercaseArray","toUpperCase","symbolsArray","numbersArray","generatePassword","value","arr","uppercaseChecked","checked","lowercaseChecked","symbolsChecked","numberChecked","passwordLength","selectedOptionsArray","possibleCombo","generatedPass","numberOfCheckedInputs","querySelectorAll","length","undefined","push","x","i","Math","floor","random","Toastify","text","gravity","duration","position","close","style","background","color","fontWeight","showToast","innerHTML","slider","max","concat","textContent","addEventListener","navigator","clipboard","writeText","then","err","alert"],"mappings":"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","file":"script.js","sourcesContent":["const mySlider = document.getElementById(\"range_input\");\r\nlet valPercent;\r\nlet output = document.querySelector('#output_value')\r\n\r\nconst clipBoard = document.querySelector('#clipboard');\r\nconst btn = document.querySelector('.generate_button')\r\nlet pwDisplay = document.querySelector('#generated-password-area')\r\nconst uppercaseInput = document.querySelector('.uppercase')\r\nconst lowercaseInput = document.querySelector('.lowercase')\r\nconst numberInput = document.querySelector('.number')\r\nconst symbolInput = document.querySelector('.symbol')\r\nconst indicator = document.querySelector('.indicator')\r\n\r\n\r\nconst eg = [ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',\r\n'M', 'N', 'O', 'P', 'Q', 'R',  'S', 'T', 'U', 'V', 'W', 'X',\r\n    'Y', 'Z']\r\nconst lowercaseArray = eg.join('').toLowerCase().split(' ')\r\nconst uppercaseArray = eg.join('').toUpperCase().split(' ')\r\nconst symbolsArray = ['~`|!@#$%^&*()_-+=.,']\r\nconst numbersArray = ['0123456789']\r\n\r\n\r\n// THIS DIDN'T WORK ðŸ˜‚\r\n\r\n// let iteration = lowerCaseArray.length + upperCaseArrayMain.length + symbolsArray.length + nubersArray.length;\r\n// console.log(iteration);\r\n\r\n// let selectedItems = [{\r\n//     name: 'lowercase',\r\n//     possibleOutcome: lowercaseArray\r\n// }, {\r\n//     name: 'uppercase',\r\n//     possibleOutcome: uppercaseArray\r\n// }, {\r\n//     name: 'symbols',\r\n//     possibleOutcome: symbolsArray\r\n// }, {\r\n//     name: 'number',\r\n//     possibleOutcome: numbersArray\r\n//     }];\r\n// console.log(selectedItems[0].possibleOutcome);\r\n\r\n\r\n\r\n\r\n// calling the generate pasword function\r\nlet generatePassword = () => {\r\n    pwDisplay.value = '' // setting the value of the input to be empty just incase if the user has already one before , so to ensure the new genearted value doesn't get combined with the old one\r\n\r\n    const uppercaseChecked = uppercaseInput.checked // if/when uppercase checkbox is checked\r\n    const lowercaseChecked = lowercaseInput.checked // if/when lowercase checkbox is checked\r\n    const symbolsChecked = symbolInput.checked // if/when symbols checkbox is checked\r\n    const numberChecked = numberInput.checked // if/when numbers checkbox is checked\r\n\r\n\r\n    let passwordLength = mySlider.value; // getting how many password to be generated from the slider input value\r\n    let randomNumber = (arr) => {\r\n        return Math.floor(Math.random() * arr.length); // function to get a random number in regards to the arr length passed into it\r\n    }\r\n    let selectedOptionsArray = []; // empty array to get arrays of selected possible combinations\r\n    let possibleCombo = ''; //empty string to get and combine each array inside the array above\r\n    \r\n\r\n    let generatedPass = []; // this is where the generated password is pushed into and later converted into a string\r\n    // console.log(passwordLength);\r\n    let numberOfCheckedInputs = document.querySelectorAll('input[type=\"checkbox\"]:checked').length ? undefined : 0;\r\n\r\n\r\n\r\n    if (passwordLength >= 4 && numberOfCheckedInputs !== 0) {\r\n\r\n        // generate only works if there is minumum of 4 character length selected and at least one checkbox checked\r\n\r\n        // pushing the selected option array into the selectedOptionsArray\r\n        if (uppercaseChecked) selectedOptionsArray.push(uppercaseArray)\r\n        if (lowercaseChecked) selectedOptionsArray.push(lowercaseArray)\r\n        if (symbolsChecked) selectedOptionsArray.push(symbolsArray)\r\n        if (numberChecked) selectedOptionsArray.push(numbersArray)\r\n\r\n\r\n        for (let x = 0; x < selectedOptionsArray.length; x++) {\r\n           // I am looping through the selctedOptionsArray here to single out each array in it to further convert to a string in the possibleCombo variable\r\n            possibleCombo += selectedOptionsArray[x]\r\n        \r\n        }\r\n\r\n        generatedPass.push(possibleCombo) // an array with all the possible combinations\r\n        generatedPass = generatedPass.join('') // converted to a string \r\n\r\n        for (let i = 0; i < passwordLength; i++) {\r\n            pwDisplay.value += generatedPass[randomNumber(generatedPass)]\r\n    \r\n            // looping through the generatedPass string and getting a random value and adding it to the password display element\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n        \r\n        // console.log(possibleCombo);\r\n        // console.log(generatedPass);\r\n        // console.log(selectedOptionsArray);\r\n\r\n\r\n    } else if (passwordLength < 4) {\r\n        // alert('minimum of 4 characters to be generated !!')\r\n        Toastify({\r\n            text: \"minimum of 4 characters to be generated ðŸ˜‰\",\r\n            gravity: \"top\",\r\n            duration: 3000,\r\n            position: 'right',\r\n            close: true,\r\n            style: {\r\n                background: \"linear-gradient(to right, #A4FFAF, #A4FFAa)\",\r\n                color: \"#000\",\r\n                fontWeight: 700,\r\n            }\r\n          }).showToast();\r\n    } else if (numberOfCheckedInputs === 0 || undefined) {\r\n        // alert ('select format for password generation')\r\n        Toastify({\r\n            text: \"select format for password generation ðŸ˜’\",\r\n            gravity: \"top\",\r\n            duration: 3000,\r\n            position: 'right',\r\n            close: true,\r\n            style: {\r\n                background: \"linear-gradient(to right, #A4FFAF, #A4FFAa)\",\r\n                color: \"#000\",\r\n                fontWeight: 700,\r\n            }\r\n          }).showToast();\r\n    }\r\n\r\n\r\n\r\n\r\n    // wanted to guarantee each option selected will be generated, couldn't , well at least for now ðŸ˜‰\r\n    // let crossCheck = (selectedCombination, array) => {\r\n    //     let sampleArray = [];\r\n    //     sampleArray = pwDisplay.value.split('')\r\n\r\n    //     for (let y = 0; y < array.length; y++) \r\n    //     if (selectedCombination === true && !pwDisplay.value.includes(array[y])) {\r\n    //         pwDisplay.value.substring(0, 1).replace(/^0+/g, '');           \r\n    //         } \r\n\r\n    // }\r\n\r\n    \r\n    // displaying the strength of the generated password \r\n    let displayStrength = () => {\r\n        indicator.innerHTML = ''\r\n        if (passwordLength <= 7 && pwDisplay.value !== '') {\r\n            indicator.innerHTML += `\r\n            <p class=\"text\">small</p>\r\n            <span style=\"background-color: #d90429;\"></span>\r\n            <span style=\"background-color: #d90429;\"></span>\r\n            <span></span>\r\n            <span></span>\r\n            `\r\n        } else if (passwordLength > 7 && passwordLength <= 10 && pwDisplay.value !== '') {\r\n            indicator.innerHTML += `\r\n            <p class=\"text\">medium</p>\r\n            <span style=\"background-color: #F9CD69;\"></span>\r\n            <span style=\"background-color: #F9CD69;\"></span>\r\n            <span style=\"background-color: #F9CD69;\"></span>\r\n            <span></span>\r\n            `\r\n        } else if (passwordLength > 10 && pwDisplay.value !== '') {\r\n            indicator.innerHTML += `\r\n            <p class=\"text\">strong</p>\r\n            <span style=\"background-color: #38b000;\"></span>\r\n            <span style=\"background-color: #38b000;\"></span>\r\n            <span style=\"background-color: #38b000;\"></span>\r\n            <span style=\"background-color: #38b000;\"></span>\r\n            `\r\n        } else {\r\n            // adding a loading svg if nothing is generated when generate button is clicked\r\n            indicator.innerHTML += `\r\n            <img style=\"position: absolute; width:40px; right:20px;\" src=\"/images/Rolling-1s-200px.svg\" alt=\"\">\r\n            `\r\n        }\r\n    }\r\n    \r\n\r\n\r\n    // crossCheck(uppercaseChecked, uppercaseArray);\r\n    // crossCheck(lowercaseChecked, lowercaseArray);\r\n    // crossCheck(symbolsChecked, symbolsArray);\r\n    // crossCheck(numberChecked, numbersArray);\r\n\r\n\r\n    displayStrength();\r\n}\r\n\r\n// copy to clipboard function\r\nclipBoard.addEventListener('click', () => {\r\n    let text = pwDisplay.value;\r\n\r\n    if (pwDisplay.value !== '') {\r\n\r\n        navigator.clipboard\r\n        .writeText(text)\r\n        .then(() => {\r\n            // alert(\"Text copied to clipboard\");\r\n            Toastify({\r\n                text: \"Password copied to clipboard !\",\r\n                gravity: \"top\",\r\n                duration: 2000,\r\n                position: 'right',\r\n                style: {\r\n                    background: \"linear-gradient(to right, #A4FFAF, #A4FFAa)\",\r\n                    color: \"#000\",\r\n                    fontWeight: 700,\r\n                }\r\n              }).showToast();\r\n        })\r\n        .catch((err) => {\r\n            alert(\"Error in copying text: \", err);\r\n        });\r\n    } else {\r\n        // alert('Nothing to copy here !')\r\n        Toastify({\r\n            text: \"Nothing to copy here !\",\r\n            gravity: \"top\",\r\n            duration: 2000,\r\n            position: 'right',\r\n            style: {\r\n                background: \"linear-gradient(to right, #A4FFAF, #A4FFAa)\",\r\n                color: \"#000\",\r\n                fontWeight: 700,\r\n            }\r\n          }).showToast();\r\n    }\r\n});\r\n\r\n\r\n\r\n// the slider display function , css is weird , didn't know styling a range input requires js. Thanks to anyone I copied there code\r\nfunction slider() {\r\n    valPercent = (mySlider.value / mySlider.max)*100;\r\n    mySlider.style.background = `linear-gradient(to right, #A4FFAF ${valPercent}%, #000 ${valPercent}%)`;\r\n    output.textContent = mySlider.value\r\n}\r\nslider();"]}