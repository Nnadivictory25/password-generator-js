{"version":3,"sources":["script.js"],"names":["valPercent","mySlider","document","getElementById","output","querySelector","clipBoard","btn","pwDisplay","uppercaseInput","lowercaseInput","numberInput","symbolInput","indicator","eg","lowercaseArray","join","toLowerCase","split","uppercaseArray","toUpperCase","symbolsArray","numbersArray","passQuery","generatePassword","value","uppercaseChecked","checked","lowercaseChecked","symbolsChecked","numberChecked","passwordLength","selectedOptionsArray","possibleCombo","generatedPass","numberOfCheckedInputs","querySelectorAll","length","undefined","push","x","string","i","arr","Math","floor","random","generateString","upArr","lowArr","symbArr","numArr","strArr","digitChecker","upperTestArr","_loop","find","ele","filter","items","lowerCaseTestArr","_loop2","symTestArr","_loop3","numTestArr","_loop4","includes","console","log","Toastify","text","gravity","duration","position","close","style","background","color","fontWeight","showToast","innerHTML","slider","max","concat","textContent","addEventListener","t","navigator","clipboard","writeText","then","err","alert"],"mappings":"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","file":"script.js","sourcesContent":["const mySlider = document.getElementById(\"range_input\");\r\nlet valPercent;\r\nlet output = document.querySelector(\"#output_value\");\r\n\r\nconst clipBoard = document.querySelector(\"#clipboard\");\r\nconst btn = document.querySelector(\".generate_button\");\r\nlet pwDisplay = document.querySelector(\"#generated-password-area\");\r\nconst uppercaseInput = document.querySelector(\".uppercase\");\r\nconst lowercaseInput = document.querySelector(\".lowercase\");\r\nconst numberInput = document.querySelector(\".number\");\r\nconst symbolInput = document.querySelector(\".symbol\");\r\nconst indicator = document.querySelector(\".indicator\");\r\n\r\nconst eg = [\r\n  \"A\",\r\n  \"B\",\r\n  \"C\",\r\n  \"D\",\r\n  \"E\",\r\n  \"F\",\r\n  \"G\",\r\n  \"H\",\r\n  \"I\",\r\n  \"J\",\r\n  \"K\",\r\n  \"L\",\r\n  \"M\",\r\n  \"N\",\r\n  \"O\",\r\n  \"P\",\r\n  \"Q\",\r\n  \"R\",\r\n  \"S\",\r\n  \"T\",\r\n  \"U\",\r\n  \"V\",\r\n  \"W\",\r\n  \"X\",\r\n  \"Y\",\r\n  \"Z\",\r\n];\r\nconst lowercaseArray = eg.join(\"\").toLowerCase().split(\" \");\r\nconst uppercaseArray = eg.join(\"\").toUpperCase().split(\" \");\r\nconst symbolsArray = [\"~!@#$%&*()_-+=.\"];\r\nconst numbersArray = [\"0123456789\"];\r\nlet passQuery = true // passQuery makes sure the generated password is accurate in regards to what the user selected\r\n\r\n\r\n\r\n// creating the generate pasword function\r\nlet generatePassword = () => {\r\n  pwDisplay.value = \"\"; // setting the value of the input to be empty just incase if the user has already one before , so to ensure the new genearted value doesn't get combined with the old one\r\n\r\n  const uppercaseChecked = uppercaseInput.checked; // if/when uppercase checkbox is checked\r\n  const lowercaseChecked = lowercaseInput.checked; // if/when lowercase checkbox is checked\r\n  const symbolsChecked = symbolInput.checked; // if/when symbols checkbox is checked\r\n  const numberChecked = numberInput.checked; // if/when numbers checkbox is checked\r\n\r\n  let passwordLength = mySlider.value; // getting how many password to be generated from the slider input value\r\n  let randomNumber = (arr) => {\r\n    return Math.floor(Math.random() * arr.length); // function to get a random number in regards to the arr length passed into it\r\n  };\r\n  let selectedOptionsArray = []; // empty array to get arrays of selected possible combinations\r\n  let possibleCombo = \"\"; //empty string to get and combine each array inside the array above\r\n\r\n  let generatedPass = []; // this is where the generated password is pushed into and later converted into a string\r\n  // console.log(passwordLength);\r\n  let numberOfCheckedInputs = document.querySelectorAll('input[type=\"checkbox\"]:checked').length ? undefined : 0;\r\n\r\n  if (passwordLength >= 4 && numberOfCheckedInputs !== 0) {\r\n    // generate only works if there is minumum of 4 character length selected and at least one checkbox checked\r\n\r\n    // pushing the selected option array into the selectedOptionsArray\r\n    if (uppercaseChecked) selectedOptionsArray.push(uppercaseArray);\r\n    if (lowercaseChecked) selectedOptionsArray.push(lowercaseArray);\r\n    if (symbolsChecked) selectedOptionsArray.push(symbolsArray);\r\n    if (numberChecked) selectedOptionsArray.push(numbersArray);\r\n    // console.log(selectedOptionsArray);\r\n\r\n    for (let x = 0; x < selectedOptionsArray.length; x++) {\r\n      // I am looping through the selctedOptionsArray here to single out each array in it to further convert to a string in the possibleCombo variable\r\n      possibleCombo += selectedOptionsArray[x];\r\n    }\r\n\r\n    generatedPass = possibleCombo.split(\"\"); // an array with all the possible combinations\r\n    let string = \"\";\r\n\r\n    let generateString = () => { // string to be displayed after successful generation and combination\r\n      for (let i = 0; i < passwordLength; i++) {\r\n        string += generatedPass[randomNumber(generatedPass)];\r\n        pwDisplay.value = string;\r\n\r\n        // looping through the generatedPass array and getting a random value and adding it to the password display element\r\n      }\r\n    };\r\n    generateString();\r\n\r\n    // made each of the combinations into a proper array . ie : from ['ABCD'] => ['A','B','C','D'] so I can loop through them\r\n    let upArr = uppercaseArray.join('').split('');\r\n    let lowArr = lowercaseArray.join('').split('');\r\n    let symbArr = symbolsArray.join('').split('');\r\n    let numArr = numbersArray.join('').split('');\r\n    let strArr = string.split('')\r\n\r\n    \r\n    let digitChecker = [] // created an accuracy verifier array\r\n\r\n    if (uppercaseChecked) {\r\n      let upperTestArr = [] // looping through upperCaseArray while checking if the generated string has any element thats in it and pushing it here\r\n      for (let i = 0; i < upArr.length; i++) {\r\n        upperTestArr.push(strArr.find(ele => upArr[i] === ele)) //  undefined will be pushed for any test that is false\r\n      }\r\n      upperTestArr = upperTestArr.filter(items => items !== undefined); //after finding it, filter out the undefined \r\n      digitChecker.push(upperTestArr.length) // push the filtered array's length into the checker (if it's 0 , then the string is inaccurate)\r\n    }\r\n\r\n    if (lowercaseChecked) {\r\n      let lowerCaseTestArr = []\r\n      for (let i = 0; i < lowArr.length; i++) {\r\n        lowerCaseTestArr.push(strArr.find(ele => lowArr[i] === ele))\r\n      }\r\n      lowerCaseTestArr = lowerCaseTestArr.filter(items => items !== undefined);\r\n      digitChecker.push(lowerCaseTestArr.length)\r\n    }\r\n\r\n    if (symbolsChecked) {\r\n      let symTestArr = []\r\n      for (let i = 0; i < symbArr.length; i++) {\r\n        symTestArr.push(strArr.find(ele => symbArr[i] === ele))\r\n      }\r\n      symTestArr = symTestArr.filter((items) => items !== undefined);\r\n      digitChecker.push(symTestArr.length)\r\n    }\r\n\r\n    if (numberChecked) {\r\n      let numTestArr = []\r\n      for (let i = 0; i < numArr.length; i++) {\r\n        numTestArr.push(strArr.find(ele => numArr[i] === ele))\r\n      }\r\n      numTestArr = numTestArr.filter(items => items !== undefined);\r\n      digitChecker.push(numTestArr.length);\r\n    }\r\n\r\n    // below I'm checking if the checker array has 0 as a value in it as this indicates that a particular selected option is not in the generated password string\r\n    if (digitChecker.includes(0)) {\r\n      passQuery = false // if so, my passQuery should be false\r\n    } else passQuery = true // but if accurately generated , passQuery is true\r\n\r\n    console.log(passQuery);\r\n      \r\n      \r\n  } else if (passwordLength < 4) {\r\n    // alert('minimum of 4 characters to be generated !!')\r\n    Toastify({\r\n      text: \"minimum of 4 characters to be generated 😉\",\r\n      gravity: \"top\",\r\n      duration: 3000,\r\n      position: \"right\",\r\n      close: true,\r\n      style: {\r\n        background: \"linear-gradient(to right, #A4FFAF, #A4FFAa)\",\r\n        color: \"#000\",\r\n        fontWeight: 700,\r\n      },\r\n    }).showToast();\r\n  } else if (numberOfCheckedInputs === 0 || undefined) {\r\n    // alert ('select format for password generation')\r\n    Toastify({\r\n      text: \"select format for password generation 😒\",\r\n      gravity: \"top\",\r\n      duration: 3000,\r\n      position: \"right\",\r\n      close: true,\r\n      style: {\r\n        background: \"linear-gradient(to right, #A4FFAF, #A4FFAa)\",\r\n        color: \"#000\",\r\n        fontWeight: 700,\r\n      },\r\n    }).showToast();\r\n  }\r\n\r\n  // displaying the strength of the generated password\r\n  let displayStrength = () => {\r\n    indicator.innerHTML = \"\";\r\n    if (passwordLength <= 7 && pwDisplay.value !== \"\") {\r\n      indicator.innerHTML += `\r\n            <p class=\"text\">small</p>\r\n            <span style=\"background-color: #d90429;\"></span>\r\n            <span style=\"background-color: #d90429;\"></span>\r\n            <span></span>\r\n            <span></span>\r\n            `;\r\n    } else if (\r\n      passwordLength > 7 &&\r\n      passwordLength <= 10 &&\r\n      pwDisplay.value !== \"\"\r\n    ) {\r\n      indicator.innerHTML += `\r\n            <p class=\"text\">medium</p>\r\n            <span style=\"background-color: #F9CD69;\"></span>\r\n            <span style=\"background-color: #F9CD69;\"></span>\r\n            <span style=\"background-color: #F9CD69;\"></span>\r\n            <span></span>\r\n            `;\r\n    } else if (passwordLength > 10 && pwDisplay.value !== \"\") {\r\n      indicator.innerHTML += `\r\n            <p class=\"text\">strong</p>\r\n            <span style=\"background-color: #38b000;\"></span>\r\n            <span style=\"background-color: #38b000;\"></span>\r\n            <span style=\"background-color: #38b000;\"></span>\r\n            <span style=\"background-color: #38b000;\"></span>\r\n            `;\r\n    } else {\r\n      // adding a loading svg if nothing is generated when generate button is clicked\r\n      indicator.innerHTML += `\r\n            <img style=\"position: absolute; width:40px; right:20px;\" src=\"/images/Rolling-1s-200px.svg\" alt=\"\">\r\n            `;\r\n    }\r\n  };\r\n\r\n  displayStrength();\r\n};\r\n\r\n// adding event listener to the generate button\r\nbtn.addEventListener('click', () => {\r\n  generatePassword()\r\n  let t = 0 // to track how many times it took this script to generate an accurate password\r\n  // - below I wrote a script to make sure the generated password is accurate in regards to user's input\r\n  // - so when password is generated (remember my passQuery variable?) and passQuery is false , keep running the generatePassword() function until it's true\r\n  while (!passQuery) { \r\n    generatePassword()\r\n    t++\r\n  }\r\n  if (pwDisplay.value.length !== 0) {\r\n    console.log(`accurately generated after ${t} trials 😎`); // How many times it took to get the accurate password generated\r\n  }\r\n});\r\n\r\n\r\n\r\n\r\n// copy to clipboard function\r\nclipBoard.addEventListener(\"click\", () => {\r\n  let text = pwDisplay.value;\r\n\r\n  if (pwDisplay.value !== \"\") {\r\n    navigator.clipboard\r\n      .writeText(text)\r\n      .then(() => {\r\n        // alert(\"Text copied to clipboard\");\r\n        Toastify({\r\n          text: \"Password copied to clipboard !\",\r\n          gravity: \"top\",\r\n          duration: 2000,\r\n          position: \"right\",\r\n          style: {\r\n            background: \"linear-gradient(to right, #A4FFAF, #A4FFAa)\",\r\n            color: \"#000\",\r\n            fontWeight: 700,\r\n          },\r\n        }).showToast();\r\n      })\r\n      .catch((err) => {\r\n        alert(\"Error in copying text: \", err);\r\n      });\r\n  } else {\r\n    // alert('Nothing to copy here !')\r\n    Toastify({\r\n      text: \"Nothing to copy here !\",\r\n      gravity: \"top\",\r\n      duration: 2000,\r\n      position: \"right\",\r\n      style: {\r\n        background: \"linear-gradient(to right, #A4FFAF, #A4FFAa)\",\r\n        color: \"#000\",\r\n        fontWeight: 700,\r\n      },\r\n    }).showToast();\r\n  }\r\n});\r\n\r\n// the slider display function , css is weird , didn't know styling a range input requires js. Thanks to anyone I copied there code\r\nfunction slider() {\r\n  valPercent = (mySlider.value / mySlider.max) * 100;\r\n  mySlider.style.background = `linear-gradient(to right, #A4FFAF ${valPercent}%, #000 ${valPercent}%)`;\r\n  output.textContent = mySlider.value;\r\n}\r\nslider();\r\n"]}